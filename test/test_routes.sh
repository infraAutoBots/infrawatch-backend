#!/bin/bash
# Script de teste das rotas de usu√°rios usando curl
# Execute com: bash test_routes.sh

API_BASE="http://localhost:8000"
TOKEN=""

echo "üöÄ Testando API de Usu√°rios - InfraWatch"
echo "========================================"

# Fun√ß√£o para fazer login e obter token
login() {
    echo "üîê Fazendo login..."
    
    RESPONSE=$(curl -s -X POST "$API_BASE/auth/login" \
        -H "Content-Type: application/json" \
        -d '{
            "email": "admin@empresa.com",
            "password": "admin123"
        }')
    
    TOKEN=$(echo $RESPONSE | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
    
    if [ -n "$TOKEN" ]; then
        echo "‚úÖ Login realizado com sucesso"
        echo "üîë Token: ${TOKEN:0:20}..."
    else
        echo "‚ùå Falha no login"
        echo "Resposta: $RESPONSE"
        exit 1
    fi
}

# Fun√ß√£o para testar listagem de usu√°rios
test_list_users() {
    echo -e "\nüìã Testando listagem de usu√°rios..."
    
    echo "1. Listagem b√°sica:"
    curl -s -X GET "$API_BASE/users" \
        -H "Authorization: Bearer $TOKEN" | jq .
    
    echo -e "\n2. Com pagina√ß√£o (p√°gina 1, 3 itens):"
    curl -s -X GET "$API_BASE/users?page=1&limit=3" \
        -H "Authorization: Bearer $TOKEN" | jq .
    
    echo -e "\n3. Busca por 'admin':"
    curl -s -X GET "$API_BASE/users?search=admin" \
        -H "Authorization: Bearer $TOKEN" | jq .
    
    echo -e "\n4. Filtro de usu√°rios ativos:"
    curl -s -X GET "$API_BASE/users?status=active" \
        -H "Authorization: Bearer $TOKEN" | jq .
    
    echo -e "\n5. Filtro por n√≠vel ADMIN:"
    curl -s -X GET "$API_BASE/users?access_level=ADMIN" \
        -H "Authorization: Bearer $TOKEN" | jq .
}

# Fun√ß√£o para testar cria√ß√£o de usu√°rio
test_create_user() {
    echo -e "\n‚ûï Testando cria√ß√£o de usu√°rio..."
    
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    
    RESPONSE=$(curl -s -X POST "$API_BASE/users" \
        -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        -d "{
            \"name\": \"Teste Usuario $TIMESTAMP\",
            \"email\": \"teste_$TIMESTAMP@exemplo.com\",
            \"password\": \"senha123\",
            \"access_level\": \"MONITOR\",
            \"state\": true
        }")
    
    echo "$RESPONSE" | jq .
    
    # Extrair ID do usu√°rio criado
    USER_ID=$(echo "$RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2)
    echo "üÜî Usu√°rio criado com ID: $USER_ID"
    
    return $USER_ID
}

# Fun√ß√£o para testar obten√ß√£o de usu√°rio espec√≠fico
test_get_user() {
    local user_id=$1
    echo -e "\nüë§ Testando obten√ß√£o do usu√°rio $user_id..."
    
    curl -s -X GET "$API_BASE/users/$user_id" \
        -H "Authorization: Bearer $TOKEN" | jq .
}

# Fun√ß√£o para testar atualiza√ß√£o de usu√°rio
test_update_user() {
    local user_id=$1
    echo -e "\n‚úèÔ∏è Testando atualiza√ß√£o do usu√°rio $user_id..."
    
    curl -s -X PUT "$API_BASE/users/$user_id" \
        -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
            "name": "Usuario Atualizado",
            "access_level": "VIEWER"
        }' | jq .
}

# Fun√ß√£o para testar altera√ß√£o de status
test_update_status() {
    local user_id=$1
    echo -e "\nüîÑ Testando altera√ß√£o de status do usu√°rio $user_id..."
    
    echo "Desativando usu√°rio:"
    curl -s -X PATCH "$API_BASE/users/$user_id/status" \
        -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        -d '{"state": false}' | jq .
    
    sleep 1
    
    echo -e "\nReativando usu√°rio:"
    curl -s -X PATCH "$API_BASE/users/$user_id/status" \
        -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        -d '{"state": true}' | jq .
}

# Fun√ß√£o para testar estat√≠sticas
test_stats() {
    echo -e "\nüìä Testando estat√≠sticas..."
    
    curl -s -X GET "$API_BASE/users/stats/summary" \
        -H "Authorization: Bearer $TOKEN" | jq .
}

# Fun√ß√£o para testar exclus√£o de usu√°rio
test_delete_user() {
    local user_id=$1
    echo -e "\nüóëÔ∏è Testando exclus√£o do usu√°rio $user_id..."
    
    curl -s -X DELETE "$API_BASE/users/$user_id" \
        -H "Authorization: Bearer $TOKEN" | jq .
}

# Fun√ß√£o principal
main() {
    # Verificar se jq est√° instalado
    if ! command -v jq &> /dev/null; then
        echo "‚ö†Ô∏è jq n√£o est√° instalado. Instalando..."
        sudo apt-get update && sudo apt-get install -y jq
    fi
    
    # Fazer login
    login
    
    # Testar listagem
    test_list_users
    
    # Criar usu√°rio para testes
    test_create_user
    USER_ID=$?
    
    if [ $USER_ID -gt 0 ]; then
        # Testar opera√ß√µes com o usu√°rio criado
        test_get_user $USER_ID
        test_update_user $USER_ID
        test_update_status $USER_ID
        
        # Testar estat√≠sticas
        test_stats
        
        # Excluir usu√°rio de teste
        test_delete_user $USER_ID
    fi
    
    echo -e "\nüéâ Testes conclu√≠dos!"
}

# Verificar se a API est√° rodando
echo "üîç Verificando se a API est√° rodando..."
if curl -s -f "$API_BASE/docs" > /dev/null; then
    echo "‚úÖ API est√° rodando"
    main
else
    echo "‚ùå API n√£o est√° rodando em $API_BASE"
    echo "Execute: python api/app.py"
    exit 1
fi
