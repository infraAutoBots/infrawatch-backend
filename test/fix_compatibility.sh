#!/bin/bash

# =============================================================================
# SCRIPT DE CORRE√á√ÉO DE COMPATIBILIDADE - INFRAWATCH
# =============================================================================
# Corrige conflitos identificados entre schemas e dados existentes
# Data: 08/09/2025
# =============================================================================

echo "üîß INFRAWATCH - CORRE√á√ÉO DE COMPATIBILIDADE DE DADOS"
echo "===================================================="
echo "Data/Hora: $(date)"
echo ""

# Ativar ambiente virtual
source ../venv/bin/activate

# Verificar se a API est√° rodando
echo "üîç Verificando conectividade com o banco..."
if ! sqlite3 ../database.db "SELECT COUNT(*) FROM users;" > /dev/null 2>&1; then
    echo "‚ùå Erro: N√£o foi poss√≠vel conectar ao banco de dados"
    exit 1
fi
echo "‚úÖ Conex√£o com banco estabelecida"
echo ""

# =============================================================================
# PROBLEMA 1: Valor inv√°lido de impact em alerts
# =============================================================================
echo "üö® CORRE√á√ÉO 1: Valores inv√°lidos de impact em alerts"
echo "------------------------------------------------"

# Verificar registros problem√°ticos
INVALID_IMPACT=$(sqlite3 ../database.db "SELECT COUNT(*) FROM alerts WHERE impact NOT IN ('high', 'medium', 'low');")
echo "üìä Registros com impact inv√°lido encontrados: $INVALID_IMPACT"

if [ "$INVALID_IMPACT" -gt 0 ]; then
    echo "üîç Registros problem√°ticos:"
    sqlite3 ../database.db "SELECT id, title, impact FROM alerts WHERE impact NOT IN ('high', 'medium', 'low');"
    
    echo ""
    echo "üîÑ Corrigindo valores inv√°lidos..."
    
    # Backup antes da corre√ß√£o
    echo "üíæ Criando backup..."
    sqlite3 ../database.db ".dump alerts" > "../backup_alerts_$(date +%Y%m%d_%H%M%S).sql"
    
    # Corrigir valores inv√°lidos
    sqlite3 ../database.db "UPDATE alerts SET impact = 'high' WHERE impact = 'host unreachable';"
    
    # Verificar corre√ß√£o
    REMAINING_INVALID=$(sqlite3 ../database.db "SELECT COUNT(*) FROM alerts WHERE impact NOT IN ('high', 'medium', 'low');")
    
    if [ "$REMAINING_INVALID" -eq 0 ]; then
        echo "‚úÖ Corre√ß√£o conclu√≠da - Todos os valores de impact est√£o v√°lidos"
    else
        echo "‚ùå Erro: Ainda existem $REMAINING_INVALID registros com valores inv√°lidos"
    fi
else
    echo "‚úÖ Nenhum valor inv√°lido de impact encontrado"
fi

echo ""

# =============================================================================
# PROBLEMA 2: Nicknames vazios em endpoints
# =============================================================================
echo "üè∑Ô∏è CORRE√á√ÉO 2: Nicknames vazios em endpoints"
echo "--------------------------------------------"

# Verificar registros problem√°ticos
EMPTY_NICKNAMES=$(sqlite3 ../database.db "SELECT COUNT(*) FROM endpoints WHERE nickname IS NULL OR nickname = '';")
echo "üìä Endpoints com nickname vazio encontrados: $EMPTY_NICKNAMES"

if [ "$EMPTY_NICKNAMES" -gt 0 ]; then
    echo "üîç Endpoints problem√°ticos:"
    sqlite3 ../database.db "SELECT id, ip, nickname FROM endpoints WHERE nickname IS NULL OR nickname = '';"
    
    echo ""
    echo "üîÑ Preenchendo nicknames vazios..."
    
    # Backup antes da corre√ß√£o
    echo "üíæ Criando backup..."
    sqlite3 ../database.db ".dump endpoints" > "../backup_endpoints_$(date +%Y%m%d_%H%M%S).sql"
    
    # Corrigir nicknames vazios
    sqlite3 ../database.db "UPDATE endpoints SET nickname = 'Endpoint-' || ip WHERE nickname IS NULL OR nickname = '';"
    
    # Verificar corre√ß√£o
    REMAINING_EMPTY=$(sqlite3 ../database.db "SELECT COUNT(*) FROM endpoints WHERE nickname IS NULL OR nickname = '';")
    
    if [ "$REMAINING_EMPTY" -eq 0 ]; then
        echo "‚úÖ Corre√ß√£o conclu√≠da - Todos os endpoints t√™m nickname"
    else
        echo "‚ùå Erro: Ainda existem $REMAINING_EMPTY endpoints sem nickname"
    fi
else
    echo "‚úÖ Todos os endpoints j√° t√™m nickname"
fi

echo ""

# =============================================================================
# VERIFICA√á√ÉO FINAL
# =============================================================================
echo "üîç VERIFICA√á√ÉO FINAL DA COMPATIBILIDADE"
echo "======================================"

echo "1. Verificando valores de impact..."
FINAL_INVALID_IMPACT=$(sqlite3 ../database.db "SELECT COUNT(*) FROM alerts WHERE impact NOT IN ('high', 'medium', 'low');")
if [ "$FINAL_INVALID_IMPACT" -eq 0 ]; then
    echo "   ‚úÖ Todos os valores de impact est√£o v√°lidos"
else
    echo "   ‚ùå Ainda existem $FINAL_INVALID_IMPACT valores inv√°lidos"
fi

echo "2. Verificando nicknames..."
FINAL_EMPTY_NICKNAMES=$(sqlite3 ../database.db "SELECT COUNT(*) FROM endpoints WHERE nickname IS NULL OR nickname = '';")
if [ "$FINAL_EMPTY_NICKNAMES" -eq 0 ]; then
    echo "   ‚úÖ Todos os endpoints t√™m nickname"
else
    echo "   ‚ùå Ainda existem $FINAL_EMPTY_NICKNAMES endpoints sem nickname"
fi

echo ""

# Calcular status geral
TOTAL_ISSUES=$((FINAL_INVALID_IMPACT + FINAL_EMPTY_NICKNAMES))

if [ "$TOTAL_ISSUES" -eq 0 ]; then
    echo "üéâ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!"
    echo "   Todos os problemas de compatibilidade foram resolvidos."
    exit 0
else
    echo "‚ö†Ô∏è  CORRE√á√ÉO PARCIAL"
    echo "   Ainda existem $TOTAL_ISSUES problemas n√£o resolvidos."
    exit 1
fi
