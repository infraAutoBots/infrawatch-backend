#!/usr/bin/env python3
"""
Script para testar as rotas de usu√°rios da API InfraWatch
Execute com: python test_users_api.py
"""

import requests
import json
import sys
from pprint import pprint
from datetime import datetime

# Configura√ß√£o da API
API_BASE = "http://localhost:8000"
AUTH_ENDPOINT = f"{API_BASE}/auth/login"
USERS_ENDPOINT = f"{API_BASE}/users"

# Credenciais de teste (assumindo que existe um admin)
TEST_CREDENTIALS = {
    "email": "ndondadaniel2020@gmail.com",
    "password": "ndondadaniel2020@gmail.com"
}

class APITester:
    def __init__(self):
        self.token = None
        self.session = requests.Session()
    
    def authenticate(self):
        """Faz login e obt√©m o token de autentica√ß√£o"""
        try:
            response = self.session.post(AUTH_ENDPOINT, json=TEST_CREDENTIALS)
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.token}"})
                print(f"‚úÖ Autentica√ß√£o realizada com sucesso")
                return True
            else:
                print(f"‚ùå Falha na autentica√ß√£o: {response.status_code} - {response.text}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro de conex√£o durante autentica√ß√£o: {e}")
            return False
    
    def test_list_users(self):
        """Testa a listagem de usu√°rios"""
        print("\nüîç Testando listagem de usu√°rios...")
        
        try:
            # Teste b√°sico de listagem
            response = self.session.get(USERS_ENDPOINT)
            print(f"Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Listagem b√°sica funcionando")
                print(f"   Total de usu√°rios: {data.get('total', 0)}")
                print(f"   P√°gina atual: {data.get('page', 1)}")
                print(f"   Total de p√°ginas: {data.get('pages', 1)}")
                
                # Testar pagina√ß√£o
                response_page2 = self.session.get(f"{USERS_ENDPOINT}?page=2&limit=5")
                if response_page2.status_code == 200:
                    print(f"‚úÖ Pagina√ß√£o funcionando")
                
                # Testar busca
                response_search = self.session.get(f"{USERS_ENDPOINT}?search=admin")
                if response_search.status_code == 200:
                    print(f"‚úÖ Busca funcionando")
                
                # Testar filtros
                response_filter = self.session.get(f"{USERS_ENDPOINT}?status=active&access_level=ADMIN")
                if response_filter.status_code == 200:
                    print(f"‚úÖ Filtros funcionando")
                
                return True
            else:
                print(f"‚ùå Falha na listagem: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro no teste de listagem: {e}")
            return False
    
    def test_create_user(self):
        """Testa a cria√ß√£o de usu√°rio"""
        print("\n‚ûï Testando cria√ß√£o de usu√°rio...")
        
        test_user = {
            "name": "Usu√°rio Teste",
            "email": f"teste_{datetime.now().strftime('%Y%m%d_%H%M%S')}@exemplo.com",
            "password": "senha123",
            "access_level": "MONITOR",
            "state": True
        }
        
        try:
            response = self.session.post(USERS_ENDPOINT, json=test_user)
            print(f"Status: {response.status_code}")
            
            if response.status_code == 201:
                data = response.json()
                print(f"‚úÖ Usu√°rio criado com sucesso")
                print(f"   ID: {data.get('user', {}).get('id')}")
                print(f"   Nome: {data.get('user', {}).get('name')}")
                return data.get('user', {}).get('id')
            else:
                print(f"‚ùå Falha na cria√ß√£o: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro na cria√ß√£o de usu√°rio: {e}")
            return None
    
    def test_get_user(self, user_id):
        """Testa a obten√ß√£o de um usu√°rio espec√≠fico"""
        if not user_id:
            return False
            
        print(f"\nüë§ Testando obten√ß√£o do usu√°rio {user_id}...")
        
        try:
            response = self.session.get(f"{USERS_ENDPOINT}/{user_id}")
            print(f"Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Usu√°rio obtido com sucesso")
                print(f"   Nome: {data.get('name')}")
                print(f"   Email: {data.get('email')}")
                return True
            else:
                print(f"‚ùå Falha ao obter usu√°rio: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao obter usu√°rio: {e}")
            return False
    
    def test_update_user(self, user_id):
        """Testa a atualiza√ß√£o de usu√°rio"""
        if not user_id:
            return False
            
        print(f"\n‚úèÔ∏è Testando atualiza√ß√£o do usu√°rio {user_id}...")
        
        update_data = {
            "name": "Usu√°rio Teste Atualizado"
        }
        
        try:
            response = self.session.put(f"{USERS_ENDPOINT}/{user_id}", json=update_data)
            print(f"Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Usu√°rio atualizado com sucesso")
                print(f"   Novo nome: {data.get('user', {}).get('name')}")
                return True
            else:
                print(f"‚ùå Falha na atualiza√ß√£o: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na atualiza√ß√£o: {e}")
            return False
    
    def test_update_user_status(self, user_id):
        """Testa a altera√ß√£o de status do usu√°rio"""
        if not user_id:
            return False
            
        print(f"\nüîÑ Testando altera√ß√£o de status do usu√°rio {user_id}...")
        
        try:
            # Desativar usu√°rio
            response = self.session.patch(
                f"{USERS_ENDPOINT}/{user_id}/status",
                json={"state": False}
            )
            print(f"Status (desativar): {response.status_code}")
            
            if response.status_code == 200:
                print(f"‚úÖ Status alterado para inativo")
                
                # Reativar usu√°rio
                response = self.session.patch(
                    f"{USERS_ENDPOINT}/{user_id}/status",
                    json={"state": True}
                )
                
                if response.status_code == 200:
                    print(f"‚úÖ Status alterado para ativo")
                    return True
            
            print(f"‚ùå Falha na altera√ß√£o de status: {response.text}")
            return False
            
        except Exception as e:
            print(f"‚ùå Erro na altera√ß√£o de status: {e}")
            return False
    
    def test_get_stats(self):
        """Testa a obten√ß√£o de estat√≠sticas"""
        print("\nüìä Testando obten√ß√£o de estat√≠sticas...")
        
        try:
            response = self.session.get(f"{USERS_ENDPOINT}/stats/summary")
            print(f"Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Estat√≠sticas obtidas com sucesso")
                print(f"   Total de usu√°rios: {data.get('total_users')}")
                print(f"   Administradores: {data.get('admins')}")
                print(f"   Monitores: {data.get('monitors')}")
                print(f"   Visualizadores: {data.get('viewers')}")
                return True
            else:
                print(f"‚ùå Falha ao obter estat√≠sticas: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao obter estat√≠sticas: {e}")
            return False
    
    def test_delete_user(self, user_id):
        """Testa a exclus√£o de usu√°rio"""
        if not user_id:
            return False
            
        print(f"\nüóëÔ∏è Testando exclus√£o do usu√°rio {user_id}...")
        
        try:
            response = self.session.delete(f"{USERS_ENDPOINT}/{user_id}")
            print(f"Status: {response.status_code}")
            
            if response.status_code == 200:
                print(f"‚úÖ Usu√°rio exclu√≠do com sucesso")
                return True
            else:
                print(f"‚ùå Falha na exclus√£o: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na exclus√£o: {e}")
            return False
    
    def run_all_tests(self):
        """Executa todos os testes"""
        print("üöÄ Iniciando testes da API de Usu√°rios...")
        print(f"üîó API Base: {API_BASE}")
        
        # Autenticar
        if not self.authenticate():
            print("\n‚ùå N√£o foi poss√≠vel autenticar. Verifique se a API est√° rodando e as credenciais est√£o corretas.")
            return False
        
        # Executar testes
        results = []
        
        # Teste de listagem
        results.append(("Listagem", self.test_list_users()))
        
        # Teste de cria√ß√£o
        user_id = self.test_create_user()
        results.append(("Cria√ß√£o", user_id is not None))
        
        if user_id:
            # Testes que dependem de ter um usu√°rio criado
            results.append(("Obter usu√°rio", self.test_get_user(user_id)))
            results.append(("Atualizar usu√°rio", self.test_update_user(user_id)))
            results.append(("Alterar status", self.test_update_user_status(user_id)))
            results.append(("Excluir usu√°rio", self.test_delete_user(user_id)))
        
        # Teste de estat√≠sticas
        results.append(("Estat√≠sticas", self.test_get_stats()))
        
        # Relat√≥rio final
        print("\n" + "="*50)
        print("üìã RELAT√ìRIO FINAL DOS TESTES")
        print("="*50)
        
        passed = 0
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
            print(f"{test_name:<20} {status}")
            if result:
                passed += 1
        
        print(f"\nüìà Resumo: {passed}/{total} testes passaram ({passed/total*100:.1f}%)")
        
        if passed == total:
            print("üéâ Todos os testes passaram com sucesso")
        else:
            print("‚ö†Ô∏è Alguns testes falharam. Verifique a implementa√ß√£o.")
        
        return passed == total


def main():
    """Fun√ß√£o principal"""
    print("üß™ Testador da API de Usu√°rios - InfraWatch")
    print("-" * 50)
    
    tester = APITester()
    success = tester.run_all_tests()
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == "__main__":
    main()
