versao que funciona com ping
{
  "ip": "127.0.0.1",
  "interval": 30,
  "version": "",
  "community": "",
  "port": null,
  "user": "",
  "authKey": "",
  "privKey": "",
  "webhook": ""
}

versao que funciona com snmp (ping e snmpv3)
# community estiver vazio o e porque a versao do SNMP e 3
# Para usar a versao 3, e necessario fornecer as informacoes 
# de usuario e as chaves de autenticacao e privacidade se houver
# se for versão 3 nem sempre e autenticada
# a baixo estão as configurações da versão 3
{
1. {
    "ip": "192.168.8.159",
    "interval": 30,
    "version": "3",
    "community": "",
    "port": 161,
    "user": "admin",
    "authKey": "authKey",
    "privKey": "privKey"
}
2. {
    "ip": "192.168.8.159",
    "version": "3",
    "community": "",
    "port": 161,
    "user": "admin",
    "authKey": "authKey",
    "privKey": ""
}
3. {
    "ip": "192.168.8.159",
    "version": "3",
    "community": "",
    "port": 161,
    "user": "admin",
    "authKey": "",
    "privKey": ""
}
4. {
    "ip": "192.168.8.159",
    "version": "3",
    "community": "",
    "port": 161,
    "user": "",
    "authKey": "",
    "privKey": ""
}
}



# por padrão, a versão 2c é usada e a passagem de parâmetros é feita através
{
{
    "ip": "192.168.8.159",
    "Interval": 30,
    "version": "2c",
    "community": "public",
    "port": 161,
    "user": "",
    "authKey": "",
    "privKey": ""
}

# versão 1
{
    "ip": "192.168.8.159",
    "version": "1",
    "community": "public",
    "port": 161,
    "user": "",
    "authKey": "",
    "privKey": ""
}
}





# oid data
id
nome
sysDescr_id :null
cpu_id :null
disk_id :null
uptime_id :null
storage_id :null



# oid value
id
marca
value



OIDS = {
    "sysDescr": [
        "1.3.6.1.2.1.1.1.0",  # padrão
    ],
    "cpu": [
        "1.3.6.1.4.1.2021.11.9.0",   # UCD-SNMP CPU idle
        "1.3.6.1.4.1.9.2.1.57.0",    # Cisco CPU
        "1.3.6.1.4.1.2636.3.1.13.1.8.0",  # Juniper CPU
        "1.3.6.1.4.1.2021.11.50.0",  # Linux CPU system
        "1.3.6.1.4.1.2021.11.52.0",  # Linux CPU user
    ],
    "disk": [
        "1.3.6.1.4.1.2021.9.1.6.1",   # UCD-SNMP disk
        "1.3.6.1.4.1.9.9.305.1.1.1.0", # Cisco Disk
        "1.3.6.1.4.1.2636.3.1.13.1.11.0", # Juniper Disk
    ],
    "uptime": [
        "1.3.6.1.2.1.1.3.0",  # padrão sysUpTime
    ],
    "storage": [
        "1.3.6.1.4.1.2021.4.6.0",   # UCD-SNMP memory free
        "1.3.6.1.4.1.9.2.1.8.0",    # Cisco memory
        "1.3.6.1.4.1.2636.3.1.13.1.15.0", # Juniper memory
        "1.3.6.1.4.1.2021.4.5.0",   # Linux total RAM
    ]
}



fazer testes e marcar o oids  de cada device com base no  iod que funcionou



# ajustar na api
0.1.opcional. Ajustar os nomes de device para endpoit e data endpoit                    V/
1.1. Definir os dados que seram coletados.                                              V/
{
    id_end_poit
    sysDescr (1.3.6.1.2.1.1.1.0) – Descrição do sistema (SO, versão, etc.)
    sysName (1.3.6.1.2.1.1.5.0) – Nome do host
    sysUpTime (1.3.6.1.2.1.1.3.0) – Tempo de atividade desde o último reboot
    hrProcessorLoad (1.3.6.1.2.1.25.3.3.1.2) – Uso de CPU (Carga da CPU por núcleo)
    memTotalReal (1.3.6.1.4.1.2021.4.5.0) – Total de memória física
    memAvailReal (1.3.6.1.4.1.2021.4.6.0) – Memória física livre
    hrStorageSize (1.3.6.1.2.1.25.2.3.1.5) – Capacidade total Armazenamento e discos
    hrStorageUsed (1.3.6.1.2.1.25.2.3.1.6) – Espaço utilizado Armazenamento e discos
}
1.2. Ajustar a tabela e schemas rotas que trabalham com os valores dos endpoit  V/
    os dados do oid tem que ser enviado com os dados do oid                     V/ 
    os oids seram add com o endpoint.
Nota: Os dados seram opcionalizados pelo front. para saber se vai add ou vai escolher opcoes ja exixtentes




######### o monitoramento vai fucionar da seguinte forma #########
1. usar orm para padronizacao tabelas e schemas V/
1.1 O monitoramento vai coletar os dados dos ips e os oids dos endpoints V/
1.2 vai coletar os dados remotos e add na bd V/
2. conecao com bando de dados. V/
    2.1 carregar todos os dados necessarios e guardar o a quantidade de endpoints V/
    2.3 verificar se a quantidade de endpoint ainda e o mesmo nao for carregar V/
    2.4 criar um carregamento inteligente que vai verificar quais dados novos
     endpoints add e quais remover fazer o monitoramento  V/

3. VALIDACAO A ADD:
    para tentar pegar os dados via snmp tem que cumprir um
    requisto ter oid e od dados relacionados a isso prenchidos

3.1 ADD MONITORAMENTO COM A VERSAO 3 DO SNMP

4.  POBLEMA:
    quando o simulador snmp e fechado todos teste snmp falha
    quando voltamos a abrir o simulador e ativemos os endpoints
    snmp o codigo de monitoramento nao consegue funcionar, para
    funcionar e necessario para o codigo e executar de novo
    possiblidade a engine cria fica com poblema.

    POSSIVEL SOLUCAO: depois de tentar fazer a requisicao
    10 e nao for possivel pagar os dados criar uma nova
    engine de conexao

Nota: seria interecante se na interface podece temum btn que diz
      que este enpoint ainda nao vai ser monitorado se vaiser monitorado

finaly:
# Fazer os teste com dados e os teste sem dados no monitoramento
# Ajustar a saida dos dados da ApI
# dar no cloud para ajustar o codigo e otimizar



{
    "ip": "127.0.0.1",
    "interval": 30,
    "version": "2c",
    "community": "public",
    "port": 161,
    "user": "",
    "authKey": "",
    "privKey": "",
    "webhook": "",
    "sysDescr": "1.3.6.1.2.1.1.1.0",
    "sysName": "1.3.6.1.2.1.1.5.0",
    "sysUpTime": "1.3.6.1.2.1.1.3.0",
    "hrProcessorLoad": "1.3.6.1.2.1.25.3.3.1.2",
    "memTotalReal": "1.3.6.1.4.1.2021.4.5.0",
    "memAvailReal": "1.3.6.1.4.1.2021.4.6.0",
    "hrStorageSize": "1.3.6.1.2.1.25.2.3.1.5",
    "hrStorageUsed": "1.3.6.1.2.1.25.2.3.1.6"
}


